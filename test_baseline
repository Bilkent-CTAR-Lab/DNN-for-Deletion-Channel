import numpy as np
import argparse
import scipy
import os
import sys

from baseline_functions import baseline_simulation_LDPC


parser = argparse.ArgumentParser(description='Testing for the baseline decoders!')

parser.add_argument('--path', default='Results of baseline method', type = str,
                    help = 'The source where results will be saved!')
parser.add_argument('--test_points_Pd', default=[0.02, 0.03, 0.04, 0.05, 0.06, 0.07],
                    type=list, help = 'Deletion test points')
parser.add_argument('--test_points_Ps', default=[sys.float_info.min], type=list, 
                    help = 'Substition probability test points (type: list)')
parser.add_argument('--test_points_Pi', default=[sys.float_info.min], type=list, 
                    help = 'Insertion probability test points (type: list)')
parser.add_argument('--fer_errors', default=100, type=int, 
                    help = 'Number of fer errors until simulation runs for each test point')       
parser.add_argument('--marker_sequence', default=np.array([0,1]).reshape(1,-1), type = np.array,
                      help = 'Specify the marker sequence.')   
parser.add_argument('--Nc', default=10, type = int, help = 'After how many bits, markers are inserted')
parser.add_argument('--iter_num', default=100, type = int, help='Iteration number of the LDPC Sum product Decoder')
parser.add_argument('--matrix', choices = ['small', 'medium', 'large', 'xlarge'], type = str,
                    help = 'The size of the parity check matrix (default small). Experiments show results only for small', 
                    default = 'small')
parser.add_argument('--print_every',default=10, type = int)
parser.add_argument('--CSI', choices=['unk', 'known', None], help = 'Channel State Information')
parser.add_argument('--seed', default=1000, type = int, help = 'Seed for reproducibility')


args = parser.parse_args()

# Fix the seed for reproducibility!
np.random.seed(args.seed)

# Fix the seed for reproducibility!
matrix_path = 'H_matrix_' + args.matrix + '.mat'
filepath = os.path.join('Matrices', matrix_path)
H = scipy.io.loadmat(filepath)['H'] 

# Get args
iter_num = args.iter_num
marker_seq = args.marker_sequence
print_every = args.print_every
Nc = args.Nc
fer_errors = args.fer_errors
#Pi = args.test_points_Pi
#Ps = args.test_points_Ps
#Pd = args.test_points_Pd
Ps = [0.01,0.02,0.03, 0.04, 0.05, 0.06, 0.07]
Pd = [0.03]
Pi = [sys.float_info.min]
#path = args.path
#csi = args.CSI
csi = 'unk'


# Simulation logs
print('Simulation starts for the baseline decoder with BCJR based estimator and the LDPC decoder')
print('The Partiy-Check matrix size is ', H.shape)
print('Nc (In how many codeword bits, marker sequence is added) =', Nc)
print('Iteration Number of the LDPC decoder = ', iter_num)
print('Marker sequence is ', marker_seq)

# Run the simulation
res = baseline_simulation_LDPC(H,iter_num,marker_seq,Nc,Pd,Pi,Ps,print_every = 10,
                                CSI=csi, P_est=[sys.float_info.min, sys.float_info.min], max_fer = 100)
print('Simulation is finished')



